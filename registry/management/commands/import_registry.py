import csv
import io
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError

from django.core.management.base import BaseCommand
from registry.models import PhoneCode


CSV_URLS = [
    "https://opendata.digital.gov.ru/downloads/ABC-3xx.csv",
    # "https://opendata.digital.gov.ru/downloads/ABC-4xx.csv",
    # "https://opendata.digital.gov.ru/downloads/ABC-8xx.csv",
    # "https://opendata.digital.gov.ru/downloads/DEF-9xx.csv",
]


class Command(BaseCommand):
    help = "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"

    def handle(self, *args, **kwargs):
        self.stdout.write("‚ñ∂Ô∏è –ò–º–ø–æ—Ä—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø—É–ª–æ–≤...")

        created = 0
        updated = 0
        skipped = 0
        split_applied = 0

        for url in CSV_URLS:
            self.stdout.write(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞: {url}")
            try:
                req = Request(
                    url,
                    headers={
                        "User-Agent": (
                            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                            "AppleWebKit/537.36 (KHTML, like Gecko) "
                            "Chrome/113.0.0.0 Safari/537.36"
                        )
                    }
                )
                response = urlopen(req)
                csv_data = io.TextIOWrapper(response, encoding='utf-8')
                reader = csv.DictReader(csv_data, delimiter=';')

                def get_field(row, *names):
                    for name in names:
                        if name in row:
                            return row[name].strip()
                    return ''

                for row in reader:
                    try:
                        code = get_field(row, '–ö–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–ê–í–°/ DEF', '\ufeff–ê–í–°/ DEF')
                        start = int(get_field(row, '–î–∏–∞–ø–∞–∑–æ–Ω —Å', '–û—Ç'))
                        end = int(get_field(row, '–î–∏–∞–ø–∞–∑–æ–Ω –ø–æ', '–î–æ'))
                        capacity = int(get_field(row, '–ï–º–∫–æ—Å—Ç—å'))
                        operator = get_field(row, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–û–ø–µ—Ä–∞—Ç–æ—Ä')
                        region = get_field(row, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞', '–†–µ–≥–∏–æ–Ω')
                        inn = get_field(row, '–ò–ù–ù –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–ò–ù–ù')

                        # –∏—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏
                        overlapping = PhoneCode.objects.filter(
                            code=code,
                            start__lte=end,
                            end__gte=start
                        )

                        if not overlapping.exists():
                            # –Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ‚Äî —Å–æ–∑–¥–∞—ë–º
                            PhoneCode.objects.create(
                                code=code, start=start, end=end,
                                capacity=capacity, operator=operator,
                                region=region, inn=inn
                            )
                            created += 1
                            continue

                        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                        for existing in overlapping:
                            # –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            if (
                                    existing.start == start and
                                    existing.end == end and
                                    existing.capacity == capacity and
                                    existing.operator == operator and
                                    existing.region == region and
                                    existing.inn == inn
                            ):
                                skipped += 1
                                break

                            # —É–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
                            existing.delete()

                            # —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
                            if existing.start < start:
                                PhoneCode.objects.create(
                                    code=code, start=existing.start, end=start - 1,
                                    capacity=existing.capacity,
                                    operator=existing.operator,
                                    region=existing.region,
                                    inn=existing.inn
                                )
                                split_applied += 1

                            # —á–∞—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ (–Ω–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä)
                            PhoneCode.objects.create(
                                code=code, start=start, end=end,
                                capacity=capacity, operator=operator,
                                region=region, inn=inn
                            )
                            split_applied += 1

                            # —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
                            if existing.end > end:
                                PhoneCode.objects.create(
                                    code=code, start=end + 1, end=existing.end,
                                    capacity=existing.capacity,
                                    operator=existing.operator,
                                    region=existing.region,
                                    inn=existing.inn
                                )
                                split_applied += 1

                            break  # –æ–¥–∏–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Äî –æ–¥–∏–Ω —Ä–∞–∑

                    except Exception as e:
                        self.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {row}\n{e}")

            except (URLError, HTTPError) as e:
                self.stderr.write(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {str(e)}")

        self.stdout.write(self.style.SUCCESS(
            f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: —Å–æ–∑–¥–∞–Ω–æ ‚Äî {created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚Äî {updated}, "
            f"–ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî {skipped}, —Ä–∞–∑–±–∏–µ–Ω–∏–π ‚Äî {split_applied}"
        ))
